import pandas as pd
from pathlib import Path
import sys
import numpy as np
import warnings

warnings.simplefilter("ignore")

"""
This script will take a csv in the format as received via email from komanawa and will process into a csv in the format
the stochastic weather generator has been prepared for,
This script should be run from a commandline with the argument of a path to the csv to reformat.
The reformatted csv will be output to the same location as the input csv with _fixed appended to the filename.
"""

# month lookup table
months = [None,
          "Jan",
          "Feb",
          "Mar",
          "Apr",
          "May",
          "Jun",
          "Jul",
          "Aug",
          "Sep",
          "Oct",
          "Nov",
          "Dec",
          ]

arg=sys.argv[1]

# raising error if csv not found
if not Path(arg).exists():
    raise FileNotFoundError(f"{arg} not found, run this script with the only the argument of the path to csv for reformatting \n"
                            "e.g python fix_csv.py /home/data/test.csv")

# getting path and filename from argument
base_path= Path("/".join(arg.split("/")[:-1]))
fname = arg.split("/")[-1].split(".")[0]


df=pd.read_csv(base_path/f"{fname}.csv",skiprows=[0])

# transforming months to %b format
df["month"] = df["month"].transform(lambda x: months[x])
# set index to year
df =df.set_index("year")

# look up tables for classes
temp_lookup = {1.0:"H", 0.0:"AT", -1.0:"C", np.nan:None}
precip_lookup = {1.0:"D", 0.0:"AP", -1.0:"W", np.nan:None}

# methods for transforming temp and precip values
def fix_temp(x):
    return temp_lookup[x]


def fix_precip(x):
    return precip_lookup[x]

# transforming precip and temp vlaues
df["prev_precip"].iloc[1:] = df["prev_precip"].iloc[1:].transform(fix_precip)
df["precip"] = df["precip"].transform(fix_precip)
df["temp"] = df["temp"].transform(fix_temp)
df["prev_temp"].iloc[1:] = df["prev_temp"].iloc[1:].transform(fix_precip)

# renaming temp and precip columns
df["temp_class"] = df["temp"]
df["precip_class"] = df["precip"]

# dropping old names of columns
df = df.drop(["temp", "precip"], axis=1)

# output file
out_path = base_path/f"{fname}_fixed.csv"
f = open(out_path, "w")

# adding documentation to csv
f.write(f"# This file was generated by fix_csv.py from {arg} \n")
f.write(f"# This file contains the same classifications as the parent file just has columns and cell values renamed to "
        f"naming conventions that were used in preparation of the stochastic weather generator \n")
f.write("# For temperature the classes are H, C, AT which mean Hot, Cold, Average Temperature \n")
f.write("# For precipitation the classes are D, W , AP which mean Dry, Wet, Average Precipitation \n")
df.to_csv(f)
f.close()
print(f"output to {base_path/fname}_fixed.csv")
#df.to_csv("vcsn_fixed_for_alex.csv")

